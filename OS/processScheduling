进程调度是操作系统中一个重要的功能, 它负责决定在多道程序环境下, 哪个进程将获得CPU时间片来执行。
进程调度涉及以下多个队列:
1. 就绪队列(Ready Queue)
    这是最常见的队列, 其中保存了已经准备好运行但还未获得CPU时间的所有进程。
    操作系统从就绪队列中选择下一个要运行的进程, 根据调度算法决定执行顺序。
2. 等待队列(Waiting Queue)
    也称阻塞队列, 通常存放为等待某种条件就绪或等待某种事件(例如IO、资源申请和释放)而暂时不能运行的队列
    一旦事件发生, 进程会从等待队列移动到就绪队列, 等待CPU调度执行。
3.后备队列(Job Queue):
    在批处理系统中可能会使用后备队列, 其中存放了用户提交的所有作业。
    操作系统根据某种策略, 从后备队列中选择要调度的作业, 并将其放入就绪队列。
4. 优先级队列:
    有些调度算法使用多个优先级队列，每个队列存放不同优先级的进程。
    操作系统可以根据进程的优先级，从相应的队列中进行选择。
5. 多级反馈队列:
    这是一种组合型队列，将进程分成多个优先级，每个优先级对应一个队列。
    进程初始进入较高优先级的队列，如果执行时间过长，可能会降低优先级，从而进入较低优先级的队列。

进程调度的目标包括：

1. 公平性
    为每个进程提供公平的CPU时间, 防止某个进程长时间占用CPU导致其他进程无法得到执行机会。
2. 响应时间
    尽量减少进程从提交到开始执行的时间，以提高系统对用户请求的响应速度。
3. 吞吐量
    最大化单位时间内完成的进程数量，提高系统整体的工作效率。
4. CPU利用率
    保持CPU的高利用率, 避免出现空闲或闲置状态。

操作系统使用各种调度算法来实现这些目标，常见的调度算法包括

1. 先来先服务(FCFS, First-Come-First-Served)
    按照进程到达的顺序分配CPU时间片, 适用于长作业的环境, 但可能导致短作业等待时间过长。
2. 最短作业优先(SJF, Shortest Job First)
    优先调度估计执行时间最短的进程，以最小化平均等待时间，但可能导致长作业被饿死。
3. 优先级调度
    为每个进程分配优先级，优先级高的进程先执行。可以是静态优先级（进程提交时分配）或动态优先级（根据执行情况调整）。
4. 时间片轮转(RR,Round Robi)
    将CPU时间划分为固定大小的时间片, 每个进程轮流执行一个时间片, 适用于多用户环境。
5. 多级反馈队列调度
    将进程按优先级分为多个队列, 优先级高的队列分配更多时间片, 适用于兼顾短作业和长作业。
