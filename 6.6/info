共享内存：实现通过共享内存进行的进程间通信

1.创建一块共享内存
2.使进程与共享内存进行关联
3.进行通信
4.取消进程与共享内存的关联
5.释放共享内存

创建两个进程，模拟服务器端和客户端

服务器端负责创建和释放共享内存
客户端关联共享内存，然后向客户端输入要通信的内容
服务器端接受客户端传输的内容

通信完成后，双方同时取消关联，由服务器端释放

通过shmget接口申请共享内存
int shmget(key_t key, size_t size, int shmflg);

1.系统在进行IPC通信时必须指定一个值,于是就通过ftok函数得到该值
    参数key是通过ftok接口获取的key值,该值由路径和项目id经过某种算法计算后得出
    目的是为了区分不同的共享内存,就像是一个身份证号
    ftok的路径名和项目id都可以自己设置
    key_t ftok(const char *pathname, int proj_id);
    失败会返回-1,同时设置错误码
2. size是申请共享内存空间的大小

3.shmflg是申请时要控制的选项
    如果选项只有IPC_CREAT, 且要创建的共享内存不存在，就会创建这个共享内存并且返回
    如果要创建的共享内存已经存在，就会返回这个共享内存

    如果选项有IPC_CREAT和IPC_EXCL，且该共享内存已经存在，就会返回错误码
    如果创建成功，则该共享内存一定是最新的

如果创建共享内存失败，就会返回-1，否则返回有效的shm标识符

内存创建成功后，需要把shm映射到进程的地址空间中，随后可像本地空间一样访问
    void* shmat(int shmid, const void* shmaddr, int shmflg);
    shmid是要关联shm的id，shmaddr是指定把共享内存放到进程地址空间的哪个位置
    给第二个参数nullptr选择让内核自己决定索要存放的位置
    第三个参数如果是SHM_RDONLY，被链接的部分就是只读模式，其他就是读和写

    函数如果调用成功，就返回进程地址空间中的地址，否则返回(void*)-1

关联后可以进行通信，通信后要取消关联
    int shmdt(const void* shmaddr);
    不成功就返回-1

取消关联后，要释放shm空间
    int shmctl(int shmid, int cmd, struct shmid_ds* buf);
    该函数完成对共享内存的控制
    第一个参数是shmid
    第二个参数
        IPC_STAT：得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中
        IPC_SET：改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内
        IPC_RMID:删除这片共享内存
    第三个参数：管理共享内存的结构体，不需要就传入nullptr

