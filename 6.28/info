1.线程id的含义
    为了管理线程, 需要对线程进行先描述再组织
    线程id本质上是虚拟地址空间中的一个地址
    该区域位于地址空间中的共享区, 所有新线程像数组中的元素一样被存放在共享区中 
    线程id就是这个区域中的一个地址数据, 通过这个地址可以访问到线程属性等相关信息
    
2.理解线程私有栈
    线程私有栈准确说是线程的独立栈, 用来存放线程回调函数中的变量
    线程栈并不私有, 其他线程也可以通过地址进行访问

3.对线程库的理解:用户级线程和LWP
    线程库对系统底层的线程操作进行了封装, 给用户提供上层接口
    库中的接口调用系统接口对LWP进行操作
    在用户角度看来, 就是在使用用户级线程
    但本质上Linux并没有真正意义上的线程, 只是用进程来模拟线程

4.线程的局部存储
    线程可重入函数内部创建的局部变量会放在线程的独立栈中
    每个线程对该变量的改变不会影响其他线程

5.线程并发访问临界资源
    临界资源: 一次只允许一个进程使用的公共资源
    临界区: 线程中访问临界资源的那段程序被称为临界区
    只要访问临界资源的线程没有退出, 其他临界资源就会等待
    通产不会让线程长时间的占有临界资源

6.线程分离
    默认情况下, 线程是joinable的
    线程退出后, 需要对其进行pthread_join操作, 否则会内存泄漏
    如果不关心线程的返回值, 可以不通过pthread_join回收
    可以通过pthread_detach使线程进行分离, 告诉系统自动释放线程资源
