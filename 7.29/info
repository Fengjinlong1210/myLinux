使用setsockopt设置允许端口号相同但IP地址不同的多个套接字 
#include <sys/types.h>
#include <sys/socket.h>
int setsockopt(int sockfd, int level, int optname,
            const void *optval, socklen_t optlen);
        SOL_SOCKET
//1. 套接字描述符
//2. 等级设置为SOL_SOCKET
//3. 选项名设置为SO_REUSEADDR
//4. 通常使用int类型, 非零表示生效, 0表示无效
//5. 第四个参数的长度

设置完成后, 服务器ctrl+c后, 可以立即重启

tcp的确认应答机制:
1. 发送方会将数据分成小的数据段(数据包), 每个数据段都有一个序列号, 用来标识数据在数据流中的顺序
2. 数据传输: 发送方将数据发送给接收方, 接收方会检验, 确保数据没有损坏
3. 接收方收到数据后, 会向发送方发送一个ACK(acknowledgement), 其中包含了下一次希望收到的序列号
4. 如果发送方在一定时间内没有收到ACK报文, 发送方会认为自己发送的报文丢失, 会再次向接收方发送相同的报文
5. 接收方会按照序列号进行排序, 以保证对数据进行正确处理
6. 如果接收方接收到了相同的报文, 会对报文进行去重
通过这样的确认应答机制, 可以保证数据传输的可靠性
可靠性并不是保证数据能百分之百的传输到对方, 而是能在丢失或损坏的情况下对数据进行重新发送

超时重传机制:
1. 发送方将数据发出后, 如果一定时间内没有收到接收方的应答, 发送方会认为报文丢失或损坏
   然后发送方会再次向接受方发送相同的报文
2. 直到接收到正确的ACK应答
3. 超时的时间设置要根据网络环境来设置, 如果设置的太长会导致效率低下, 如果太短会导致数据重发
这种超时重传能够保证可靠性, 但是也会带来一定的额外开销

tcp三次握手
1. 第一次握手: 客户端向服务器发送一个请求连接的数据包, 称为SYN包(synchronize)
   其中包含一个随机的序列号作为初始序列号, 该报文的SYN标志为置1
2. 第二次握手: 服务器向客户端发送一个SYN+ACK的报文, 表示同意客户端的连接请求, 并请求建立连接
3. 第三次握手: 客户端对服务器的SYN+ACK做出ACK, 告知服务器同意进行连接
在这个过程中, 双方都确认了对方的通信信道是通畅的, 确认了彼此的接收能力, 保证了可靠性

tcp四次挥手
1. 第一次挥手FIN: 主动断开方发送一个FIN报文, FIN标志为置1, 申请断开连接
2. 第二次挥手ACK: 被动断开方(服务器)接收到FIN报文后, 确认关闭请求同时回应ACK
                服务器仍可以向客户端发送数据
3. 第三次挥手FIN: 被动关闭方也发送一个FIN报文, 表示也准备关闭连接
4. 第四次挥手ACK: 主动关闭方也回应一个ACK报文, 确认关闭请求
四次挥手交换了两方关闭连接的请求和确认对方的关闭请求, 从而确保连接的可靠关闭

TIME_WAIT状态
1. 该状态是在客户端发送最后一个ACK报文后发生的
2. 客户端进入该状态后, 会等待一段时间(通常是两倍的报文最大存在时间)
3. 确保网络中所有的ACK包全部被服务器端接收或自动消失
4. 这样可以保证下次连接时不会收到旧连接发送的数据包, 防止把旧的数据包当成新数据包来处理
5. TIME_WAIT状态结束后, 客户端才会释放资源关闭连接

CLOSE_WAIT状态
1. 客户端向服务器发送FIN报文, 请求断开连接, 此时tcp进入CLOSE_WAIT状态
2. 服务器没有确认或处理请求, 没有及时关闭fd, 所以服务器进入CLOSE_WAIT状态

滑动窗口
1. 发送方滑动窗口表示接收方接收缓冲区可以接收的数据量
2. 接收方接收到报文后, 会在报头中填写自身的接收缓冲区大小, 表示自己当前的接收能力
3. 发送方需要根据对方发来的窗口大小来控制自身的发送速度, 窗口大小与发送数据量呈正相关
4. 当发送方的报文被对方确认后, 滑动窗口会向后移动, 准备发送下一个数据, 只有确认过的数据才会从发送缓冲区中移除或覆盖
5. 如果对方没有对发送的报文进行响应, 发送方会重新发送报文

滑动窗口是tcp进行流量控制的一种机制, 可以根据对方的接收能力控制发送速率
用来实现数据传输的可靠性和效率性

拥塞控制
当网络中数据流量过大或者网络资源不足时, 可能会导致网络拥塞
拥塞控制是为了控制网络中的流量和资源被合理使用, 防止网络负载过大, 使网络资源能被公平的使用
1. 慢开始: 拥塞控制在最开始时, 会发送较少量的数据, 探测网络状况
2. 快增长: 随着不断探测, 发送的数据量会先呈现指数型增长, 再线性增长
   当达到阈值时, 发送的数据量会呈现线性增长
3. 快重传: 当接收方接收到三个重复确认时, 会立即重发数据包, 而不是等待超时重传, 同时会将阈值减半, 拥塞窗口置1
拥塞控制能根据网络状况增减发送的数据量, 避免网络拥塞, 提高发送稳定性, 可靠性

延迟应答机制
接收方会等待一段时间, 等上层将接收缓冲区中的数据拿取后再向发送方回应
如此就会有更大的接收缓冲区以便接收更多数据, 增加了发送数据的量, 提高了效率

粘包问题: 站在应用层的角度, 接收方接收到的数据是以字节流的形式存在于缓冲区中
         应用层就无法准确的区分一个完整的数据包
解决: 明确包与包之间的边界 
1. 发送定长的数据包, 但是由于数据大小不确定, 会导致浪费
2. 包头标识长度, 以便知道包尾的位置
3. 包尾增加分割符
4. 使用应用层协议, 协议中包含了包的头尾信息或分割符
